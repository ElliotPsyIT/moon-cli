#!/usr/bin/env node
"use strict";

var hexu = require("hexu");
var fs = require("fs");
var path = require('path');
var readline = require('readline');
var ncp = require('ncp');
var exec = require("child_process").execSync;

var pkg = require("../package.json");
var load = require("../src/loader.js");

var command = process.argv.slice(2);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

load.defineRl(rl);

const space = (num) => {
  return "\n".repeat(num);
}

const intro = () => {
  console.log(hexu.blue("======= MOON =======") + space(1));
}

const help = () => {
  console.log("    Usage: moon <command> [options]");
  console.log(space(1));
  console.log("    Commands: ");
  console.log("      init\tgenerates a new project");
  console.log(space(1));
  console.log("    Options: ");
  console.log("      -h, --help\tdisplays this help message");
  console.log("      -v, --version\tdisplays current Moon version");
  exit();
}

const version = () => {
  console.log(pkg.version);
  exit();
}

const err = (msg) => {
  console.log("  Moon " + hexu.red("ERR") + "    " + msg);
  exit();
}

const exit = () => {
  rl.close();
}

const mkdir = (pathToCreate, cb) => {
  try {
    fs.mkdir(path.join(pathToCreate), function() {
      cb();
    });
  } catch(err) {
    if ( err.code !== 'EEXIST' ) throw err;
  }
}

var walk = function(dir, done) {
  var results = [];
  fs.readdir(dir, function(err, list) {
    if (err) return done(err);
    var pending = list.length;
    if (!pending) return done(null, results);
    list.forEach(function(file) {
      file = path.resolve(dir, file);
      fs.stat(file, function(err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function(err, res) {
            results = results.concat(res);
            if (!--pending) done(null, results);
          });
        } else {
          results.push(file);
          if (!--pending) done(null, results);
        }
      });
    });
  });
};

const info = (cb) => {
  var name = JSON.stringify(exec('git config --get user.name').toString().trim()).slice(1, -1);
  var answers = {}
  ask("Author", name, function(answer) {
    answers.author = answer;
    ask("Moon Version", "v0.1.3", function(answer2) {
      answers.version = answer2
      cb(answers);
    });
  });
}

const ask = (question, def, cb) => {
  var prompt;
  if(def) {
    prompt = "    " + hexu.green("[?]") + " " + question + hexu.grey(" (" + def + ")  ");
  } else {
    prompt = "    " + hexu.green("[?]") + " " + question + "  ";
  }
  rl.question(prompt, (answer) => {
    if(!answer) answer = def;
    readline.moveCursor(rl, 0, -1);
    rl.write("\n");
    readline.moveCursor(rl, 0, -2);
    rl.write("    " + hexu.green("[?]") + " " + question + "  " + hexu.cyan(answer) + "\n\n");
    readline.moveCursor(rl, 0, -1);
    rl.write(" ".repeat(prompt.length) + "\n");
    cb(answer);
  });
}

var read = function(file, cb) {
  fs.readFile(file, 'utf8', function(err, content) {
    cb(file, content);
  });
}

const compile = (name, opts, cb) => {
  walk(path.join(process.cwd(), name), function(err, files) {
    for(var i = 0; i < files.length; i++) {
      var file = files[i];
      var count = -1;
      read(file, function(fileName, content) {
        var compiled = content.replace(/{{author}}/g, opts.author);
        compiled = compiled.replace(/{{version}}/g, opts.version);
        fs.writeFile(fileName, compiled, 'utf8', function(err) {
          if(err) {
            err(err);
          }
          count++;
          if(files.length - 1 === count) {
            cb();
          }
        });
      });
    }
  });
}

const init = (name) => {
  info(function(opts) {
    var templateLoader = new load(hexu.blue("generating") + " template");
    mkdir(name, function() {

    });
    ncp(__dirname + "/../template", process.cwd() + "/" + name, function (error) {
      if(error) console.log(error);
      compile(name, opts, function() {
        rl.on('close', function() {
          console.log("\n\n");
          console.log("    " + hexu.blue("moon") + " generated app " + hexu.grey("'" + name + "'"));
          console.log("\n");
          console.log(hexu.grey("    To Start, run:"));
          console.log("      cd " + name);
          console.log(hexu.grey("    The app will be running at:"));
          console.log("      file://" + path.join(process.cwd(), name, "index.html"));
        })
        templateLoader.done(function() {
          rl.close();
        });
      });
    });
  });
}

intro();
switch (command[0]) {
  case undefined:
    help();
    break;
  case "-h":
    help();
    break;
  case "--help":
    help();
    break;
  case "-v":
    version();
    break;
  case "--version":
    version();
    break;
  case "init":
    if(command[1]) {
      init(command[1]);
    } else {
      err("Please provide an app name");
    }
    break;
  default:
    err("Command Not Found");
}
